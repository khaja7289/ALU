Qflow synthesis logfile created on Sunday 01 October 2023 12:40:43 PM IST
Running yosys for verilog parsing and synthesis
yosys  -s ALU_64bit.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `ALU_64bit.ys' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v
Parsing Verilog input from `/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v' to AST representation.
Generating RTLIL representation for module `\ALU_64bit'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \ALU_64bit

3.1.2. Analyzing design hierarchy..
Top module:  \ALU_64bit
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:46$2 in module ALU_64bit.
Marked 2 switch rules as full_case in process $proc$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:32$1 in module ALU_64bit.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_INIT pass (extract init attributes).

3.2.4. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset in `\ALU_64bit.$proc$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:32$1'.

3.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ALU_64bit.$proc$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:46$2'.
     1/1: $0\result_reg[63:0]
Creating decoders for process `\ALU_64bit.$proc$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:32$1'.
     1/1: $0\enable_clk[0:0]

3.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\ALU_64bit.\result_reg' using process `\ALU_64bit.$proc$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:46$2'.
  created $dff cell `$procdff$41' with positive edge clock.
Creating register for signal `\ALU_64bit.\enable_clk' using process `\ALU_64bit.$proc$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:32$1'.
  created $adff cell `$procdff$42' with positive edge clock and positive level reset.

3.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 2 empty switches in `\ALU_64bit.$proc$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:46$2'.
Removing empty process `ALU_64bit.$proc$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:46$2'.
Found and cleaned up 1 empty switch in `\ALU_64bit.$proc$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:32$1'.
Removing empty process `ALU_64bit.$proc$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:32$1'.
Cleaned up 3 empty switches.

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_64bit.
<suppressed ~4 debug messages>

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_64bit..
Removed 0 unused cells and 7 unused wires.
<suppressed ~1 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
checking module ALU_64bit..
Warning: Wire ALU_64bit.\sum [63] is used but has no driver.
Warning: Wire ALU_64bit.\sum [64] is used but has no driver.
found and reported 2 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_64bit.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_64bit'.
<suppressed ~33 debug messages>
Removed a total of 11 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU_64bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU_64bit.
    New input vector for $reduce_or cell $procmux$40_ANY: { $procmux$26_CMP $procmux$25_CMP $procmux$27_CMP $procmux$28_CMP $procmux$29_CMP $procmux$30_CMP $procmux$31_CMP $procmux$32_CMP $procmux$33_CMP $procmux$34_CMP $procmux$35_CMP }
  Optimizing cells in module \ALU_64bit.
Performed a total of 1 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_64bit'.
Removed a total of 0 cells.

3.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_64bit..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_64bit.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU_64bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU_64bit.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_64bit'.
Removed a total of 0 cells.

3.6.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_64bit..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_64bit.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 63 bits (of 64) from mux cell ALU_64bit.$ternary$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:57$12 ($mux).
Removed top 63 bits (of 64) from mux cell ALU_64bit.$ternary$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:58$14 ($mux).
Removed top 63 bits (of 64) from mux cell ALU_64bit.$ternary$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:59$16 ($mux).
Removed top 1 bits (of 4) from port B of cell ALU_64bit.$procmux$28_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell ALU_64bit.$procmux$29_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell ALU_64bit.$procmux$30_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell ALU_64bit.$procmux$31_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell ALU_64bit.$procmux$32_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell ALU_64bit.$procmux$33_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell ALU_64bit.$procmux$34_CMP0 ($eq).
Removed top 63 bits (of 64) from wire ALU_64bit.$ternary$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:57$12_Y.
Removed top 63 bits (of 64) from wire ALU_64bit.$ternary$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:58$14_Y.
Removed top 63 bits (of 64) from wire ALU_64bit.$ternary$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:59$16_Y.

3.8. Executing PEEPOPT pass (run peephole optimizers).

3.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_64bit..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.10. Executing TECHMAP pass (map to technology primitives).

3.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

3.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~228 debug messages>

3.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module ALU_64bit:
  creating $macc model for $add$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:49$3 ($add).
  creating $macc model for $sub$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:50$4 ($sub).
  creating $alu model for $macc $sub$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:50$4.
  creating $alu model for $macc $add$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:49$3.
  creating $alu model for $lt$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:57$11 ($lt): new $alu
  creating $alu model for $eq$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:58$13 ($eq): merged with $lt$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:57$11.
  creating $alu model for $ne$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:59$15 ($ne): merged with $lt$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:57$11.
  creating $alu cell for $lt$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:57$11, $eq$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:58$13, $ne$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:59$15: $auto$alumacc.cc:474:replace_alu$47
  creating $alu cell for $add$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:49$3: $auto$alumacc.cc:474:replace_alu$60
  creating $alu cell for $sub$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:50$4: $auto$alumacc.cc:474:replace_alu$63
  created 3 $alu and 0 $macc cells.

3.12. Executing SHARE pass (SAT-based resource sharing).
Found 3 cells in module ALU_64bit that may be considered for resource sharing.
  Analyzing resource sharing options for $sshr$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:56$10 ($sshr):
    Found 1 activation_patterns using ctrl signal { $procmux$28_CMP \enable_clk }.
    No candidates found.
  Analyzing resource sharing options for $shr$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:55$9 ($shr):
    Found 1 activation_patterns using ctrl signal { $procmux$29_CMP \enable_clk }.
    No candidates found.
  Analyzing resource sharing options for $shl$/home/khaja/Desktop/verilog/qflow/64bitalu/source/ALU_64bit.v:54$8 ($shl):
    Found 1 activation_patterns using ctrl signal { $procmux$30_CMP \enable_clk }.
    No candidates found.

3.13. Executing OPT pass (performing simple optimizations).

3.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_64bit.
<suppressed ~2 debug messages>

3.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_64bit'.
Removed a total of 0 cells.

3.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU_64bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU_64bit.
    New input vector for $reduce_and cell $auto$alumacc.cc:64:get_eq$50: { $auto$alumacc.cc:490:replace_alu$48 [0] $auto$alumacc.cc:490:replace_alu$48 [1] $auto$alumacc.cc:490:replace_alu$48 [2] $auto$alumacc.cc:490:replace_alu$48 [3] $auto$alumacc.cc:490:replace_alu$48 [4] $auto$alumacc.cc:490:replace_alu$48 [5] $auto$alumacc.cc:490:replace_alu$48 [6] $auto$alumacc.cc:490:replace_alu$48 [7] $auto$alumacc.cc:490:replace_alu$48 [8] $auto$alumacc.cc:490:replace_alu$48 [9] $auto$alumacc.cc:490:replace_alu$48 [10] $auto$alumacc.cc:490:replace_alu$48 [11] $auto$alumacc.cc:490:replace_alu$48 [12] $auto$alumacc.cc:490:replace_alu$48 [13] $auto$alumacc.cc:490:replace_alu$48 [14] $auto$alumacc.cc:490:replace_alu$48 [15] $auto$alumacc.cc:490:replace_alu$48 [16] $auto$alumacc.cc:490:replace_alu$48 [17] $auto$alumacc.cc:490:replace_alu$48 [18] $auto$alumacc.cc:490:replace_alu$48 [19] $auto$alumacc.cc:490:replace_alu$48 [20] $auto$alumacc.cc:490:replace_alu$48 [21] $auto$alumacc.cc:490:replace_alu$48 [22] $auto$alumacc.cc:490:replace_alu$48 [23] $auto$alumacc.cc:490:replace_alu$48 [24] $auto$alumacc.cc:490:replace_alu$48 [25] $auto$alumacc.cc:490:replace_alu$48 [26] $auto$alumacc.cc:490:replace_alu$48 [27] $auto$alumacc.cc:490:replace_alu$48 [28] $auto$alumacc.cc:490:replace_alu$48 [29] $auto$alumacc.cc:490:replace_alu$48 [30] $auto$alumacc.cc:490:replace_alu$48 [31] $auto$alumacc.cc:490:replace_alu$48 [32] $auto$alumacc.cc:490:replace_alu$48 [33] $auto$alumacc.cc:490:replace_alu$48 [34] $auto$alumacc.cc:490:replace_alu$48 [35] $auto$alumacc.cc:490:replace_alu$48 [36] $auto$alumacc.cc:490:replace_alu$48 [37] $auto$alumacc.cc:490:replace_alu$48 [38] $auto$alumacc.cc:490:replace_alu$48 [39] $auto$alumacc.cc:490:replace_alu$48 [40] $auto$alumacc.cc:490:replace_alu$48 [41] $auto$alumacc.cc:490:replace_alu$48 [42] $auto$alumacc.cc:490:replace_alu$48 [43] $auto$alumacc.cc:490:replace_alu$48 [44] $auto$alumacc.cc:490:replace_alu$48 [45] $auto$alumacc.cc:490:replace_alu$48 [46] $auto$alumacc.cc:490:replace_alu$48 [47] $auto$alumacc.cc:490:replace_alu$48 [48] $auto$alumacc.cc:490:replace_alu$48 [49] $auto$alumacc.cc:490:replace_alu$48 [50] $auto$alumacc.cc:490:replace_alu$48 [51] $auto$alumacc.cc:490:replace_alu$48 [52] $auto$alumacc.cc:490:replace_alu$48 [53] $auto$alumacc.cc:490:replace_alu$48 [54] $auto$alumacc.cc:490:replace_alu$48 [55] $auto$alumacc.cc:490:replace_alu$48 [56] $auto$alumacc.cc:490:replace_alu$48 [57] $auto$alumacc.cc:490:replace_alu$48 [58] $auto$alumacc.cc:490:replace_alu$48 [59] $auto$alumacc.cc:490:replace_alu$48 [60] $auto$alumacc.cc:490:replace_alu$48 [61] $auto$alumacc.cc:490:replace_alu$48 [62] $auto$alumacc.cc:490:replace_alu$48 [63] }
  Optimizing cells in module \ALU_64bit.
Performed a total of 1 changes.

3.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_64bit'.
Removed a total of 0 cells.

3.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_64bit..
Removed 2 unused cells and 5 unused wires.
<suppressed ~3 debug messages>

3.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_64bit.

3.13.9. Rerunning OPT passes. (Maybe there is more to do..)

3.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU_64bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~5 debug messages>

3.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU_64bit.
Performed a total of 0 changes.

3.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_64bit'.
Removed a total of 0 cells.

3.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

3.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_64bit..

3.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_64bit.

3.13.16. Finished OPT passes. (There is nothing left to do.)

3.14. Executing FSM pass (extract and optimize FSM).

3.14.1. Executing FSM_DETECT pass (finding FSMs in design).

3.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_64bit..

3.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.15. Executing OPT pass (performing simple optimizations).

3.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_64bit.

3.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_64bit'.
Removed a total of 0 cells.

3.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_64bit..

3.15.5. Finished fast OPT passes.

3.16. Executing MEMORY pass.

3.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

3.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_64bit..

3.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_64bit..

3.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

3.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_64bit..

3.18. Executing OPT pass (performing simple optimizations).

3.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_64bit.
<suppressed ~24 debug messages>

3.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_64bit'.
Removed a total of 0 cells.

3.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_64bit..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

3.18.5. Finished fast OPT passes.

3.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

3.20. Executing OPT pass (performing simple optimizations).

3.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_64bit.

3.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_64bit'.
Removed a total of 0 cells.

3.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU_64bit..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU_64bit.
Performed a total of 0 changes.

3.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_64bit'.
Removed a total of 0 cells.

3.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

3.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_64bit..

3.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_64bit.

3.20.9. Finished OPT passes. (There is nothing left to do.)

3.21. Executing TECHMAP pass (map to technology primitives).

3.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $xor.
Using template $paramod$constmap:1204d75111519242e575dcb30fa45503aa301e66$paramod$36b8920e7a3848be892ea989cea885f4d0a8d402\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shl.
Using template $paramod$constmap:1204d75111519242e575dcb30fa45503aa301e66$paramod$1fc4696b8746083b30587e7d8736e0be925fac59\_90_shift_ops_shr_shl_sshl_sshr for cells of type $shr.
Using template $paramod$constmap:1204d75111519242e575dcb30fa45503aa301e66$paramod$f9a40d938f0eb16398869b2e278a8ea7911441f0\_90_shift_ops_shr_shl_sshl_sshr for cells of type $sshr.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=64\B_WIDTH=64\Y_WIDTH=64 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_pmux\WIDTH=64\S_WIDTH=11 for cells of type $pmux.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $adff.
Using extmapper simplemap for cells of type $reduce_and.
Using template $paramod\_90_lcu\WIDTH=64 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~3810 debug messages>

3.22. Executing OPT pass (performing simple optimizations).

3.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_64bit.
<suppressed ~601 debug messages>

3.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_64bit'.
<suppressed ~1623 debug messages>
Removed a total of 541 cells.

3.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_64bit..
Removed 213 unused cells and 471 unused wires.
<suppressed ~214 debug messages>

3.22.5. Finished fast OPT passes.

3.23. Executing ABC pass (technology mapping using ABC).

3.23.1. Extracting gate netlist of module `\ALU_64bit' to `<abc-temp-dir>/input.blif'..
Extracted 3550 gates and 3749 wires to a netlist network with 197 inputs and 66 outputs.

3.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:       50
ABC RESULTS:            ANDNOT cells:      309
ABC RESULTS:              AOI3 cells:      308
ABC RESULTS:              AOI4 cells:      116
ABC RESULTS:               MUX cells:      821
ABC RESULTS:              NAND cells:      152
ABC RESULTS:               NOR cells:       27
ABC RESULTS:               NOT cells:      104
ABC RESULTS:              OAI3 cells:      155
ABC RESULTS:              OAI4 cells:       63
ABC RESULTS:                OR cells:      197
ABC RESULTS:             ORNOT cells:      158
ABC RESULTS:              XNOR cells:       17
ABC RESULTS:               XOR cells:      149
ABC RESULTS:        internal signals:     3486
ABC RESULTS:           input signals:      197
ABC RESULTS:          output signals:       66
Removing temp directory.

3.24. Executing OPT pass (performing simple optimizations).

3.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_64bit.
<suppressed ~374 debug messages>

3.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_64bit'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

3.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_64bit..
Removed 6 unused cells and 1110 unused wires.
<suppressed ~7 debug messages>

3.24.5. Finished fast OPT passes.

3.25. Executing HIERARCHY pass (managing design hierarchy).

3.25.1. Analyzing design hierarchy..
Top module:  \ALU_64bit

3.25.2. Analyzing design hierarchy..
Top module:  \ALU_64bit
Removed 0 unused modules.

3.26. Printing statistics.

=== ALU_64bit ===

   Number of wires:               2567
   Number of wire bits:           2949
   Number of public wires:          12
   Number of public wire bits:     331
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               2684
     $_ANDNOT_                     308
     $_AND_                         50
     $_AOI3_                       308
     $_AOI4_                       116
     $_DFF_PP0_                      1
     $_DFF_P_                       64
     $_MUX_                        821
     $_NAND_                       152
     $_NOR_                         27
     $_NOT_                         98
     $_OAI3_                       155
     $_OAI4_                        63
     $_ORNOT_                      158
     $_OR_                         197
     $_XNOR_                        17
     $_XOR_                        149

3.27. Executing CHECK pass (checking for obvious problems).
checking module ALU_64bit..
found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  create mapping for $_DFF_NN0_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NN1_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFF_NP0_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_NP1_ from mapping for $_DFFSR_NPP_.
  create mapping for $_DFF_PN0_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PN1_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFF_PP0_ from mapping for $_DFFSR_PPP_.
  create mapping for $_DFF_PP1_ from mapping for $_DFFSR_PPP_.
  final dff cell mappings:
    DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    DFFSR _DFF_NN0_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_NN1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_NP0_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_NP1_ (.CLK(~C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( 1));
    DFFSR _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S( R));
    DFFSR _DFF_PP0_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( 1));
    DFFSR _DFF_PP1_ (.CLK( C), .D( D), .Q( Q), .R( 1), .S(~R));
    DFFSR _DFFSR_NNN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_NNP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_NPN_ (.CLK(~C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_NPP_ (.CLK(~C), .D( D), .Q( Q), .R(~R), .S(~S));
    DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    DFFSR _DFFSR_PNP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S( S));
    DFFSR _DFFSR_PPN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S(~S));
    DFFSR _DFFSR_PPP_ (.CLK( C), .D( D), .Q( Q), .R(~R), .S(~S));
Mapping DFF cells in module `\ALU_64bit':
  mapped 1 $_DFF_PP0_ cells to \DFFSR cells.
  mapped 64 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_64bit.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_64bit'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU_64bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU_64bit.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_64bit'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_64bit..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_64bit.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\ALU_64bit' to `<abc-temp-dir>/input.blif'..
Extracted 2620 gates and 2818 wires to a netlist network with 198 inputs and 67 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/lib/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/share/qflow/tech/osu018/osu018_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.01 sec
ABC: Memory =    0.36 MB. Time =     0.01 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:       75
ABC RESULTS:           AOI21X1 cells:      414
ABC RESULTS:           AOI22X1 cells:       58
ABC RESULTS:             INVX1 cells:      469
ABC RESULTS:            MUX2X1 cells:      129
ABC RESULTS:           NAND2X1 cells:      651
ABC RESULTS:           NAND3X1 cells:       72
ABC RESULTS:            NOR2X1 cells:      511
ABC RESULTS:           OAI21X1 cells:      950
ABC RESULTS:           OAI22X1 cells:       38
ABC RESULTS:             OR2X2 cells:       49
ABC RESULTS:           XNOR2X1 cells:       49
ABC RESULTS:            XOR2X1 cells:        8
ABC RESULTS:        internal signals:     2553
ABC RESULTS:           input signals:      198
ABC RESULTS:          output signals:       67
Removing temp directory.

7. Executing FLATTEN pass (flatten design).
No more expansions possible.

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 2820 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port ALU_64bit.alu_op: Missing option -inpad.
Mapping port ALU_64bit.carry_flag using BUFX2.
Don't map input port ALU_64bit.clk: Missing option -inpad.
Don't map input port ALU_64bit.operand_A: Missing option -inpad.
Don't map input port ALU_64bit.operand_B: Missing option -inpad.
Mapping port ALU_64bit.overflow_flag using BUFX2.
Don't map input port ALU_64bit.reset: Missing option -inpad.
Mapping port ALU_64bit.result using BUFX2.
Mapping port ALU_64bit.zero_flag using BUFX2.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_64bit.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_64bit'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ALU_64bit..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ALU_64bit.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ALU_64bit'.
Removed a total of 0 cells.

10.6. Executing OPT_RMDFF pass (remove dff with constant values).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ALU_64bit..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module ALU_64bit.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing BLIF backend.

12. Printing statistics.

=== ALU_64bit ===

   Number of wires:               3421
   Number of wire bits:           3739
   Number of public wires:        3421
   Number of public wire bits:    3739
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               3605
     AND2X2                         75
     AOI21X1                       414
     AOI22X1                        58
     BUFX2                          67
     DFFPOSX1                       64
     DFFSR                           1
     INVX1                         469
     MUX2X1                        129
     NAND2X1                       651
     NAND3X1                        72
     NOR2X1                        511
     OAI21X1                       950
     OAI22X1                        38
     OR2X2                          49
     XNOR2X1                        49
     XOR2X1                          8

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: c3c849c5e1
CPU: user 7.94s system 0.34s, MEM: 38.25 MB total, 32.07 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 24% 18x opt_clean (2 sec), 16% 17x opt_merge (1 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/share/qflow/tech/osu018/osu018_stdcells.lef
Cleaning up output syntax
ypostproc.tcl ALU_64bit_mapped.blif ALU_64bit /usr/share/qflow/tech/osu018/osu018.sh vdd gnd 
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 100 -c 20 -I ALU_64bit_nofanout -s nullstring -p /usr/share/qflow/tech/osu018/osu018_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif ALU_64bit.blif

blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 139 (load 2198.88) from node _2461_,
driven by INVX1 with strength 58.615 (fF driven at latency 100)
Top fanout load-to-strength ratio is 37.5139 (latency = 3751.39 ps)
Top input node fanout is 190 (load 3165.64) from node operand_B[0].
Warning 1: load of 115.004 is 1.94635 times greater than strongest gate XNOR2X1
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 4: load of 144.17 is 2.43995 times greater than strongest gate XNOR2X1
Warning 5: load of 167.901 is 2.84157 times greater than strongest gate XNOR2X1
Warning 19: load of 2208.88 is 4.84262 times greater than strongest gate INVX8
Warning 115: load of 588.323 is 10.11 times greater than strongest gate NOR2X1
Warning 143: load of 734.663 is 12.6247 times greater than strongest gate NOR2X1
Warning 622: load of 1169.46 is 19.6329 times greater than strongest gate DFFSR
622 gates exceed specified minimum load.
204 buffers were added.
139 gates were changed.

Gate counts by drive strength:

	"" gates	In: 1    	Out: 1    	+0
	"1" gates	In: 3413    	Out: 3274    	-139
	"2" gates	In: 191    	Out: 297    	+106

Number of gates changed: 343
gates resized: 343
blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 15 (load 522.208) from node operand_B[0_bF$buf5],
driven by BUFX2 with strength 113.163 (fF driven at latency 100)
Top fanout load-to-strength ratio is 4.8891 (latency = 488.91 ps)
Top input node fanout is 13 (load 299.13) from node operand_B[0].
Warning 1: load of 271.896 is 1.20849 times greater than strongest gate BUFX4
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 532.208 is 2.29781 times greater than strongest gate CLKBUF1
Warning 117: load of 142.993 is 2.42004 times greater than strongest gate XNOR2X1
Warning 120: load of 144.17 is 2.43995 times greater than strongest gate XNOR2X1
Warning 121: load of 167.901 is 2.84157 times greater than strongest gate XNOR2X1
Warning 136: load of 180.207 is 3.08144 times greater than strongest gate XOR2X1
Warning 161: load of 208.279 is 3.52494 times greater than strongest gate XNOR2X1
Warning 226: load of 270.449 is 4.64751 times greater than strongest gate NOR2X1
Warning 250: load of 282.919 is 4.8618 times greater than strongest gate NOR2X1
Warning 279: load of 295.127 is 5.06057 times greater than strongest gate OAI21X1
731 gates exceed specified minimum load.
0 buffers were added.
208 gates were changed.

Gate counts by drive strength:

	"" gates	In: 1    	Out: 1    	+0
	"1" gates	In: 3282    	Out: 3282    	+0
	"2" gates	In: 493    	Out: 285    	-208
	"4" gates	In: 14    	Out: 222    	+208
	"8" gates	In: 19    	Out: 19    	+0

Number of gates changed: 208
gates resized: 208
blifFanout for qflow 1.3.17
Parsing library "osu018_stdcells"
End of library at line 6141
Lib Read:  Processed 6142 lines.
Top internal fanout is 15 (load 522.208) from node operand_B[0_bF$buf5],
driven by BUFX4 with strength 224.988 (fF driven at latency 100)
Top fanout load-to-strength ratio is 4.8891 (latency = 488.91 ps)
Top input node fanout is 13 (load 299.13) from node operand_B[0].
Warning 1: load of 322.262 is 1.43235 times greater than strongest gate BUFX4
This warning will only be repeated for larger overload ratios.  Warning count reflects
the total number of overloaded nets.
Warning 2: load of 326.29 is 1.45025 times greater than strongest gate BUFX4
Warning 3: load of 383.711 is 1.70547 times greater than strongest gate BUFX4
Warning 11: load of 532.208 is 2.29781 times greater than strongest gate CLKBUF1
Warning 205: load of 142.993 is 2.42004 times greater than strongest gate XNOR2X1
Warning 208: load of 144.17 is 2.43995 times greater than strongest gate XNOR2X1
Warning 209: load of 167.901 is 2.84157 times greater than strongest gate XNOR2X1
Warning 224: load of 180.207 is 3.08144 times greater than strongest gate XOR2X1
Warning 249: load of 208.279 is 3.52494 times greater than strongest gate XNOR2X1
Warning 315: load of 270.449 is 4.64751 times greater than strongest gate NOR2X1
Warning 340: load of 282.919 is 4.8618 times greater than strongest gate NOR2X1
Warning 369: load of 295.127 is 5.06057 times greater than strongest gate OAI21X1
822 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"" gates	In: 1    	Out: 1    	+0
	"1" gates	In: 3282    	Out: 3282    	+0
	"2" gates	In: 285    	Out: 285    	+0
	"4" gates	In: 222    	Out: 222    	+0
	"8" gates	In: 19    	Out: 19    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/khaja/Desktop/verilog/qflow/64bitalu/synthesis
Files:
   Verilog: /home/khaja/Desktop/verilog/qflow/64bitalu/synthesis/ALU_64bit.rtl.v
   Verilog: /home/khaja/Desktop/verilog/qflow/64bitalu/synthesis/ALU_64bit.rtlnopwr.v
   Verilog: /home/khaja/Desktop/verilog/qflow/64bitalu/synthesis/ALU_64bit.rtlbb.v
   Spice:   /home/khaja/Desktop/verilog/qflow/64bitalu/synthesis/ALU_64bit.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/share/qflow/tech/osu018/osu018_stdcells.lib" -io_time=1n -time=100p -idelay=10p -odelay=100p -cload=500f ALU_64bit.spc ALU_64bit.xspice

Synthesis script ended on Sunday 01 October 2023 12:41:00 PM IST
